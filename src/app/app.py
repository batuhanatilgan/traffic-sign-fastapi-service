from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image
import io
import os

# -------------------------------------------------------------
# 1. Sabitler ve Model Y√ºkleme
# -------------------------------------------------------------
MODEL_PATH = "Traffic_signs_model.keras"
IMAGE_SIZE = (32, 32)
MAX_FILE_SIZE = 5 * 1024 * 1024

CLASS_NAMES = [
    "Hƒ±z Limidi (20km/h)", "Hƒ±z Limidi (30km/h)", "Hƒ±z Limidi (50km/h)", 
    "Hƒ±z Limidi (60km/h)", "Hƒ±z Limidi (70km/h)", "Hƒ±z Limidi (80km/h)", 
    "Hƒ±z Limidi Sonu (80km/h)", "Hƒ±z Limidi (100km/h)", "Hƒ±z Limidi (120km/h)", 
    "Ge√ßme Yasaƒüƒ±", "3.5 Ton √úst√º Ge√ßme Yasaƒüƒ±", "Kav≈üaklarda √ñncelik", 
    "Ana Yol", "Yol Ver", "Dur", "Giri≈ü Yok", "3.5 Ton √úst√º Kamyon Giri≈üi Yok", 
    "Genel Yasaklar Sonu", "Dikkat", "Sola Tehlikeli Viraj", "Saƒüa Tehlikeli Viraj", 
    "√áift Viraj", "Kasisli Yol", "Kaygan Yol", "Yol Daralmasƒ± (Saƒüdan)", 
    "Yol √áalƒ±≈ümasƒ±", "Trafik Lambasƒ±", "Yaya Ge√ßidi", "√áocuk Ge√ßidi", 
    "Bisiklet Ge√ßidi", "Buzlanma/Kar", "Vah≈üi Hayvan Ge√ßidi", "Genel Zorunlu Y√∂n", 
    "Saƒüa D√∂n√º≈ü Zorunluluƒüu", "Sola D√∂n√º≈ü Zorunluluƒüu", "ƒ∞leri Git Zorunluluƒüu", 
    "ƒ∞leri veya Saƒüa Git", "ƒ∞leri veya Sola Git", "Saƒüdan Ge√ßme Zorunluluƒüu", 
    "Soldan Ge√ßme Zorunluluƒüu", "D√∂nel Kav≈üak", "Ge√ßme Yasaƒüƒ± Sonu", 
    "3.5 Ton √úst√º Ge√ßme Yasaƒüƒ± Sonu"
]

# Modeli y√ºkle
try:
    model = load_model(MODEL_PATH, compile=False)
except Exception as e:
    raise RuntimeError(
        f"Model y√ºklenemedi. {MODEL_PATH} dosyasƒ±nƒ±n mevcut olduƒüundan emin olun. Hata: {e}"
    )

# -------------------------------------------------------------
# 2. FastAPI Uygulamasƒ±
# -------------------------------------------------------------
app = FastAPI(title="Trafik ƒ∞≈üareti Sƒ±nƒ±flandƒ±rma Servisi")

# CORS ayarlarƒ±
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Root endpoint (http://localhost:7001/)
@app.get("/")
async def root():
    return {"message": "Trafik ƒ∞≈üareti Sƒ±nƒ±flandƒ±rma Servisi √áalƒ±≈üƒ±yor üö¶"}

# Predict endpoint
@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    try:
        image_bytes = await file.read()

        if len(image_bytes) > MAX_FILE_SIZE:
            raise HTTPException(
                status_code=413, 
                detail=f"Dosya boyutu {MAX_FILE_SIZE / (1024*1024):.0f} MB'dan b√ºy√ºk olamaz."
            )

        # G√∂r√ºnt√º i≈üleme
        image = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        image = image.resize(IMAGE_SIZE)
        image_array = np.array(image).astype("float32") / 255.0
        processed_image = np.expand_dims(image_array, axis=0)

        # Tahmin
        predictions = model.predict(processed_image)
        predicted_index = np.argmax(predictions[0])
        confidence = float(predictions[0][predicted_index])
        predicted_label = CLASS_NAMES[predicted_index]

        return JSONResponse(content={
            "status": 200,
            "filename": file.filename,
            "predicted_label": predicted_label,
            "probability": round(confidence, 4)
        })

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Tahmin sƒ±rasƒ±nda hata: {e}")
