from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image
import io
import os

# -------------------------------------------------------------
# 1. Sabitler ve Model TanÄ±mlamalarÄ±
# -------------------------------------------------------------
MODEL_PATH = "Traffic_signs_model.keras"
IMAGE_SIZE = (32, 32)
MAX_FILE_SIZE = 5 * 1024 * 1024  # Maksimum dosya boyutu: 5 MB

# Trafik iÅŸareti sÄ±nÄ±f isimleri listesi
CLASS_NAMES = [
    "HÄ±z Limidi (20km/h)", "HÄ±z Limidi (30km/h)", "HÄ±z Limidi (50km/h)", 
    "HÄ±z Limidi (60km/h)", "HÄ±z Limidi (70km/h)", "HÄ±z Limidi (80km/h)", 
    "HÄ±z Limidi Sonu (80km/h)", "HÄ±z Limidi (100km/h)", "HÄ±z Limidi (120km/h)", 
    "GeÃ§me YasaÄŸÄ±", "3.5 Ton ÃœstÃ¼ GeÃ§me YasaÄŸÄ±", "KavÅŸaklarda Ã–ncelik", 
    "Ana Yol", "Yol Ver", "Dur", "GiriÅŸ Yok", "3.5 Ton ÃœstÃ¼ Kamyon GiriÅŸi Yok", 
    "Genel Yasaklar Sonu", "Dikkat", "Sola Tehlikeli Viraj", "SaÄŸa Tehlikeli Viraj", 
    "Ã‡ift Viraj", "Kasisli Yol", "Kaygan Yol", "Yol DaralmasÄ± (SaÄŸdan)", 
    "Yol Ã‡alÄ±ÅŸmasÄ±", "Trafik LambasÄ±", "Yaya GeÃ§idi", "Ã‡ocuk GeÃ§idi", 
    "Bisiklet GeÃ§idi", "Buzlanma/Kar", "VahÅŸi Hayvan GeÃ§idi", "Genel Zorunlu YÃ¶n", 
    "SaÄŸa DÃ¶nÃ¼ÅŸ ZorunluluÄŸu", "Sola DÃ¶nÃ¼ÅŸ ZorunluluÄŸu", "Ä°leri Git ZorunluluÄŸu", 
    "Ä°leri veya SaÄŸa Git", "Ä°leri veya Sola Git", "SaÄŸdan GeÃ§me ZorunluluÄŸu", 
    "Soldan GeÃ§me ZorunluluÄŸu", "DÃ¶nel KavÅŸak", "GeÃ§me YasaÄŸÄ± Sonu", 
    "3.5 Ton ÃœstÃ¼ GeÃ§me YasaÄŸÄ± Sonu"
]

# Model deÄŸiÅŸkeni global olarak tanÄ±mlanÄ±r
model = None

# -------------------------------------------------------------
# 2. FastAPI Uygulama BaÅŸlatma ve CORS AyarlarÄ±
# -------------------------------------------------------------
app = FastAPI(title="Trafik Ä°ÅŸareti SÄ±nÄ±flandÄ±rma Servisi")

# CORS yapÄ±landÄ±rmasÄ±: TÃ¼m kaynaklardan eriÅŸime izin verir
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Uygulama baÅŸlatÄ±ldÄ±ÄŸÄ±nda modeli yÃ¼kleme
@app.on_event("startup")
def load_ml_model():
    global model
    try:
        model = load_model(MODEL_PATH)
        print("Makine Ã¶ÄŸrenimi modeli baÅŸarÄ±yla yÃ¼klendi.")
    except Exception as e:
        print(f"Model yÃ¼klenirken hata oluÅŸtu: {e}")
        # Hata durumunda uygulama baÅŸlatÄ±lmadan sonlandÄ±rÄ±labilir
        # raise RuntimeError("Model yÃ¼klenemedi.")

# 3. API UÃ§ NoktalarÄ±

# KÃ¶k UÃ§ NoktasÄ± (Root Endpoint)
@app.get("/")
async def root():
    return {"message": "Trafik Ä°ÅŸareti SÄ±nÄ±flandÄ±rma Servisi Ã‡alÄ±ÅŸÄ±yor ğŸš¦"}

# Tahmin UÃ§ NoktasÄ± (Prediction Endpoint)
@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    if model is None:
        raise HTTPException(status_code=503, detail="Model henÃ¼z yÃ¼klenmedi veya yÃ¼klenirken hata oluÅŸtu.")
        
    try:
        image_bytes = await file.read()

        # Dosya boyutu kontrolÃ¼
        if len(image_bytes) > MAX_FILE_SIZE:
            raise HTTPException(
                status_code=413, 
                detail=f"Dosya boyutu {MAX_FILE_SIZE / (1024*1024):.0f} MB'dan bÃ¼yÃ¼k olamaz."
            )

        # GÃ¶rÃ¼ntÃ¼ Ã¶n iÅŸleme adÄ±mlarÄ±
        image = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        image = image.resize(IMAGE_SIZE)
        image_array = np.array(image).astype("float32") / 255.0
        processed_image = np.expand_dims(image_array, axis=0)

        # Makine Ã¶ÄŸrenimi modelinden tahmin alma
        predictions = model.predict(processed_image)
        predicted_index = np.argmax(predictions[0])
        confidence = float(predictions[0][predicted_index])
        predicted_label = CLASS_NAMES[predicted_index]

        # BaÅŸarÄ±lÄ± tahmin yanÄ±tÄ±
        return JSONResponse(content={
            "status": 200,
            "filename": file.filename,
            "predicted_label": predicted_label,
            "probability": round(confidence, 4)
        })

    except Exception as e:
        # Genel hata yakalama ve 500 yanÄ±tÄ± dÃ¶ndÃ¼rme
        raise HTTPException(status_code=500, detail=f"Tahmin sÄ±rasÄ±nda hata: {e}")